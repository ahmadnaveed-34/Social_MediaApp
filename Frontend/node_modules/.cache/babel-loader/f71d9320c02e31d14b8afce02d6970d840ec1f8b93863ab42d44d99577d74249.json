{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmad12\\\\Documents\\\\Vividly\\\\Frontend\\\\src\\\\Components\\\\Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport vividlyContext from \"../Context/vividlyContext\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComment, faEnvelope, faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport io from \"socket.io-client\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notifications = () => {\n  _s();\n  const [showSkeleton, setShowSkeleton] = useState(false);\n  const [countLoading, setCountLoading] = useState(0);\n  const socket = io(\"http://localhost:5000\");\n  const theme = JSON.parse(localStorage.getItem(\"theme\"));\n  const context = useContext(vividlyContext);\n  const id = localStorage.getItem(\"id\");\n  const parsedId = JSON.parse(id);\n  const {\n    handleNotifications,\n    unReadNotifications,\n    setUnreadNotifications,\n    updateNotificationStatus,\n    handleReadedNotifications,\n    markAllMessage,\n    readedNotifications\n  } = context;\n  const fetchAllNotificaions = async () => {\n    if (countLoading === 0) {\n      setShowSkeleton(true);\n    }\n    await handleNotifications();\n    await handleReadedNotifications();\n    setCountLoading(1);\n    setShowSkeleton(false);\n  };\n  useEffect(() => {\n    fetchAllNotificaions();\n  }, []);\n  useEffect(() => {\n    socket.on(\"receive_notification\", data => {\n      if (data === parsedId) {\n        fetchAllNotificaions();\n      }\n    });\n    socket.on(\"receive_message\", data => {\n      if (data.receiverId === parsedId) {\n        fetchAllNotificaions();\n      }\n    });\n    return () => {\n      socket.off(\"receive_notification\");\n      socket.off(\"receive_message\");\n    };\n  }, []);\n  const formatDate = timestamp => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    if (date.toDateString() === now.toDateString()) {\n      return new Intl.DateTimeFormat(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: true\n      }).format(date);\n    } else {\n      return new Intl.DateTimeFormat(\"en-US\", {\n        month: \"short\",\n        day: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: true\n      }).format(date);\n    }\n  };\n  const handleUpdateNotificationsFunc = async id => {\n    await updateNotificationStatus(id);\n    setUnreadNotifications(unReadNotifications.filter(notification => notification._id !== id));\n  };\n  const handleMarkAllMsgAsRead = async () => {\n    await markAllMessage();\n    setUnreadNotifications([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen ${theme === \"dark\" ? \"bg-gray-900\" : \"bg-white\"} sm:pl-72 sm:pt-24 mx-auto px-6 py-4`,\n    children: showSkeleton && /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Notifications, \"oTsPIaKJPCkqS3ZDGscVdv2sGcQ=\");\n_c = Notifications;\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useContext","useEffect","useState","vividlyContext","FontAwesomeIcon","faComment","faEnvelope","faHeart","io","Fragment","_Fragment","jsxDEV","_jsxDEV","Notifications","_s","showSkeleton","setShowSkeleton","countLoading","setCountLoading","socket","theme","JSON","parse","localStorage","getItem","context","id","parsedId","handleNotifications","unReadNotifications","setUnreadNotifications","updateNotificationStatus","handleReadedNotifications","markAllMessage","readedNotifications","fetchAllNotificaions","on","data","receiverId","off","formatDate","timestamp","date","Date","now","toDateString","Intl","DateTimeFormat","hour","minute","hour12","format","month","day","year","handleUpdateNotificationsFunc","filter","notification","_id","handleMarkAllMsgAsRead","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ahmad12/Documents/Vividly/Frontend/src/Components/Notifications.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport vividlyContext from \"../Context/vividlyContext\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faComment,\r\n  faEnvelope,\r\n  faHeart,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Notifications = () => {\r\n  const [showSkeleton, setShowSkeleton] = useState(false);\r\n  const [countLoading, setCountLoading] = useState(0);\r\n  const socket = io(\"http://localhost:5000\");\r\n  const theme = JSON.parse(localStorage.getItem(\"theme\"));\r\n  const context = useContext(vividlyContext);\r\n  const id = localStorage.getItem(\"id\");\r\n  const parsedId = JSON.parse(id);\r\n  const {\r\n    handleNotifications,\r\n    unReadNotifications,\r\n    setUnreadNotifications,\r\n    updateNotificationStatus,\r\n    handleReadedNotifications,\r\n    markAllMessage,\r\n    readedNotifications,\r\n  } = context;\r\n\r\n  const fetchAllNotificaions = async () => {\r\n    if (countLoading === 0) {\r\n      setShowSkeleton(true);\r\n    }\r\n    await handleNotifications();\r\n    await handleReadedNotifications();\r\n    setCountLoading(1);\r\n    setShowSkeleton(false);\r\n  };\r\n  useEffect(() => {\r\n    fetchAllNotificaions();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_notification\", (data) => {\r\n      if (data === parsedId) {\r\n        fetchAllNotificaions();\r\n      }\r\n    });\r\n\r\n    socket.on(\"receive_message\", (data) => {\r\n      if (data.receiverId === parsedId) {\r\n        fetchAllNotificaions();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"receive_notification\");\r\n      socket.off(\"receive_message\");\r\n    };\r\n  }, []);\r\n\r\n  const formatDate = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const now = new Date();\r\n\r\n    if (date.toDateString() === now.toDateString()) {\r\n      return new Intl.DateTimeFormat(\"en-US\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: true,\r\n      }).format(date);\r\n    } else {\r\n      return new Intl.DateTimeFormat(\"en-US\", {\r\n        month: \"short\",\r\n        day: \"2-digit\",\r\n        year: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: true,\r\n      }).format(date);\r\n    }\r\n  };\r\n\r\n  const handleUpdateNotificationsFunc = async (id) => {\r\n    await updateNotificationStatus(id);\r\n    setUnreadNotifications(\r\n      unReadNotifications.filter((notification) => notification._id !== id)\r\n    );\r\n  };\r\n  const handleMarkAllMsgAsRead = async () => {\r\n    await markAllMessage();\r\n    setUnreadNotifications([]);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`min-h-screen ${\r\n        theme === \"dark\" ? \"bg-gray-900\" : \"bg-white\"\r\n      } sm:pl-72 sm:pt-24 mx-auto px-6 py-4`}\r\n    >\r\n      {showSkeleton && <></>}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}